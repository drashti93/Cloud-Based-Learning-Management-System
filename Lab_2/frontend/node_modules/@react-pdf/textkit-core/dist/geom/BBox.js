'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _Rect = require('./Rect');

var _Rect2 = _interopRequireDefault(_Rect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BBox = function () {
  function BBox() {
    var minX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;
    var minY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;
    var maxX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -Infinity;
    var maxY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -Infinity;
    (0, _classCallCheck3.default)(this, BBox);

    this.minX = minX;
    this.minY = minY;
    this.maxX = maxX;
    this.maxY = maxY;
  }

  BBox.prototype.addPoint = function addPoint(x, y) {
    if (x < this.minX) {
      this.minX = x;
    }

    if (y < this.minY) {
      this.minY = y;
    }

    if (x > this.maxX) {
      this.maxX = x;
    }

    if (y > this.maxY) {
      this.maxY = y;
    }
  };

  BBox.prototype.addRect = function addRect(rect) {
    this.addPoint(rect.x, rect.y);
    this.addPoint(rect.maxX, rect.maxY);
  };

  BBox.prototype.toRect = function toRect() {
    return new _Rect2.default(this.minX, this.minY, this.width, this.height);
  };

  BBox.prototype.copy = function copy() {
    return new BBox(this.minX, this.minY, this.maxX, this.maxY);
  };

  (0, _createClass3.default)(BBox, [{
    key: 'width',
    get: function get() {
      return this.maxX - this.minX;
    }
  }, {
    key: 'height',
    get: function get() {
      return this.maxY - this.minY;
    }
  }]);
  return BBox;
}();

exports.default = BBox;