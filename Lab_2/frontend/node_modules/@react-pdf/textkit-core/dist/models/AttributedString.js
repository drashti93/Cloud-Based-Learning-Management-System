'use strict';

exports.__esModule = true;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _Run = require('./Run');

var _Run2 = _interopRequireDefault(_Run);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AttributedString = function () {
  function AttributedString() {
    var string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var runs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    (0, _classCallCheck3.default)(this, AttributedString);

    this.string = string;
    this.runs = runs;
    this.length = string.length;
  }

  AttributedString.fromFragments = function fromFragments() {
    var fragments = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var string = '';
    var offset = 0;
    var runs = [];

    fragments.forEach(function (fragment) {
      string += fragment.string;
      runs.push(new _Run2.default(offset, offset + fragment.string.length, fragment.attributes));
      offset += fragment.string.length;
    });

    return new AttributedString(string, runs);
  };

  AttributedString.prototype.runIndexAt = function runIndexAt(index) {
    for (var i = 0; i < this.runs.length; i++) {
      if (this.runs[i].start <= index && index < this.runs[i].end) {
        return i;
      }
    }

    return this.runs.length - 1;
  };

  AttributedString.prototype.trim = function trim() {
    var i = void 0;
    for (i = this.string.length - 1; i >= 0; i--) {
      if (this.string[i] !== ' ') {
        break;
      }
    }

    return this.slice(0, i + 1);
  };

  AttributedString.prototype.slice = function slice(start, end) {
    if (this.string.length === 0) return this;

    var startRunIndex = this.runIndexAt(start);
    var endRunIndex = Math.max(this.runIndexAt(Math.max(end - 1, 0)), startRunIndex);
    var startRun = this.runs[startRunIndex];
    var endRun = this.runs[endRunIndex];
    var runs = [];

    runs.push(startRun.slice(start - startRun.start, end - startRun.start));

    if (startRunIndex !== endRunIndex) {
      runs.push.apply(runs, this.runs.slice(startRunIndex + 1, endRunIndex).map(function (r) {
        return r.copy();
      }));

      if (endRun.start !== 0) {
        runs.push(endRun.slice(0, end - endRun.start));
      }
    }

    for (var _iterator = runs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var run = _ref;

      run.start -= start;
      run.end -= start;
    }

    return new AttributedString(this.string.slice(start, end), runs);
  };

  return AttributedString;
}();

exports.default = AttributedString;