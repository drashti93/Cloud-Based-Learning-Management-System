'use strict';

exports.__esModule = true;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Run2 = require('./Run');

var _Run3 = _interopRequireDefault(_Run2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var GlyphRun = function (_Run) {
  (0, _inherits3.default)(GlyphRun, _Run);

  function GlyphRun(start, end, attributes, glyphs, positions, stringIndices, glyphIndices, preScaled) {
    (0, _classCallCheck3.default)(this, GlyphRun);

    var _this = (0, _possibleConstructorReturn3.default)(this, _Run.call(this, start, end, attributes));

    _this.glyphs = glyphs || [];
    _this.positions = positions || [];
    _this.glyphIndices = glyphIndices || [];
    _this.stringIndices = stringIndices || [];
    _this.scale = attributes.fontSize / attributes.font.unitsPerEm;

    if (!preScaled) {
      _this.positions = _this.positions.map(function (pos, index) {
        var xAdvance = index === _this.positions.length - 1 ? pos.xAdvance * _this.scale : pos.xAdvance * _this.scale + attributes.characterSpacing;

        return {
          xAdvance: xAdvance,
          yAdvance: pos.yAdvance * _this.scale,
          xOffset: pos.xOffset * _this.scale,
          yOffset: pos.yOffset * _this.scale
        };
      });
    }
    return _this;
  }

  GlyphRun.prototype.slice = function slice(start, end) {
    var _this2 = this;

    var glyphs = this.glyphs.slice(start, end);
    var positions = this.positions.slice(start, end);
    var stringIndices = this.stringIndices.slice(start, end);
    var glyphIndices = this.glyphIndices.filter(function (i) {
      return i >= start && i < end;
    });

    glyphIndices = glyphIndices.map(function (index) {
      return index - start;
    });
    stringIndices = stringIndices.map(function (index) {
      return index - _this2.stringIndices[start];
    });

    start += this.start;
    end += this.start;
    end = Math.min(end, this.end);

    return new GlyphRun(start, end, this.attributes, glyphs, positions, stringIndices, glyphIndices, true);
  };

  GlyphRun.prototype.copy = function copy() {
    return new GlyphRun(this.start, this.end, this.attributes, [].concat(this.glyphs), [].concat(this.positions), [].concat(this.stringIndices), [].concat(this.glyphIndices), true);
  };

  (0, _createClass3.default)(GlyphRun, [{
    key: 'length',
    get: function get() {
      return this.end - this.start;
    }
  }, {
    key: 'stringStart',
    get: function get() {
      return 0;
    }
  }, {
    key: 'stringEnd',
    get: function get() {
      return this.glyphIndices.length - 1;
    }
  }, {
    key: 'advanceWidth',
    get: function get() {
      var width = 0;
      for (var _iterator = this.positions, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var position = _ref;

        width += position.xAdvance;
      }

      return width;
    }
  }, {
    key: 'ascent',
    get: function get() {
      var ascent = this.attributes.font.ascent * this.scale;

      if (this.attributes.attachment) {
        return Math.max(ascent, this.attributes.attachment.height);
      }

      return ascent;
    }
  }, {
    key: 'descent',
    get: function get() {
      return this.attributes.font.descent * this.scale;
    }
  }, {
    key: 'lineGap',
    get: function get() {
      return this.attributes.font.lineGap * this.scale;
    }
  }, {
    key: 'height',
    get: function get() {
      return this.attributes.lineHeight || this.ascent - this.descent + this.lineGap;
    }
  }]);
  return GlyphRun;
}(_Run3.default);

exports.default = GlyphRun;