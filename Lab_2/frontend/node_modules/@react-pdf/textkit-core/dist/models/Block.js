'use strict';

exports.__esModule = true;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _BBox = require('../geom/BBox');

var _BBox2 = _interopRequireDefault(_BBox);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Block = function () {
  function Block() {
    var lines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck3.default)(this, Block);

    this.lines = lines;
    this.style = style;
  }

  Block.prototype.copy = function copy() {
    var lines = this.lines.map(function (line) {
      return line.copy();
    });
    var style = (0, _extends3.default)({}, this.style);

    return new Block(lines, style);
  };

  (0, _createClass3.default)(Block, [{
    key: 'bbox',
    get: function get() {
      var bbox = new _BBox2.default();
      for (var _iterator = this.lines, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var line = _ref;

        bbox.addRect(line.rect);
      }

      return bbox;
    }
  }, {
    key: 'height',
    get: function get() {
      var height = 0;
      for (var _iterator2 = this.lines, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var line = _ref2;

        height += line.height;
      }

      return height;
    }
  }, {
    key: 'stringLength',
    get: function get() {
      var length = 0;
      for (var _iterator3 = this.lines, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
        var _ref3;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref3 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var line = _ref3;

        length += line.string.length;
      }

      return length;
    }
  }]);
  return Block;
}();

exports.default = Block;