'use strict';

exports.__esModule = true;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _Path = require('../geom/Path');

var _Path2 = _interopRequireDefault(_Path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Container = function () {
  function Container(path) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck3.default)(this, Container);

    this.path = path;
    this.blocks = [];
    this.options = options;
    this.columns = options.columns || 1;
    this.tabStops = options.tabStops || [];
    this.columnGap = options.columnGap || 18; // 1/4 inch
    this.exclusionPaths = options.exclusionPaths || [];
    this.tabStopInterval = options.tabStopInterval || 80;
  }

  Container.prototype.copy = function copy() {
    var instance = new Container(this.path, this.options);
    instance.blocks = this.blocks.map(function (b) {
      return b.copy();
    });
    return instance;
  };

  (0, _createClass3.default)(Container, [{
    key: 'bbox',
    get: function get() {
      return this.path.bbox;
    }
  }, {
    key: 'polygon',
    get: function get() {
      return this.path.toPolygon();
    }
  }, {
    key: 'exclusionPolygon',
    get: function get() {
      if (!this.exclusionPaths.length) {
        return null;
      }

      var excluded = new _Path2.default();
      for (var _iterator = this.exclusionPaths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var p = _ref;

        excluded.append(p);
      }

      return excluded.toPolygon();
    }
  }]);
  return Container;
}();

exports.default = Container;