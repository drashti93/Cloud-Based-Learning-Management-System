'use strict';

exports.__esModule = true;

var _GlyphRun = require('../models/GlyphRun');

var _GlyphRun2 = _interopRequireDefault(_GlyphRun);

var _GlyphString = require('../models/GlyphString');

var _GlyphString2 = _interopRequireDefault(_GlyphString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var resolveGlyphIndices = function resolveGlyphIndices(string, stringIndices) {
  var glyphIndices = [];

  for (var i = 0; i < string.length; i++) {
    for (var j = 0; j < stringIndices.length; j++) {
      if (stringIndices[j] >= i) {
        glyphIndices[i] = j;
        break;
      }

      glyphIndices[i] = undefined;
    }
  }

  var lastValue = glyphIndices[glyphIndices.length - 1];
  for (var _i = glyphIndices.length - 1; _i >= 0; _i--) {
    if (glyphIndices[_i] === undefined) {
      glyphIndices[_i] = lastValue;
    } else {
      lastValue = glyphIndices[_i];
    }
  }

  lastValue = glyphIndices[0];
  for (var _i2 = 0; _i2 < glyphIndices.length; _i2++) {
    if (glyphIndices[_i2] === undefined) {
      glyphIndices[_i2] = lastValue;
    } else {
      lastValue = glyphIndices[_i2];
    }
  }

  return glyphIndices;
};

var stringToGlyphs = function stringToGlyphs(attributedString) {
  var glyphIndex = 0;
  var glyphRuns = attributedString.runs.map(function (run) {
    var start = run.start,
        end = run.end,
        attributes = run.attributes;

    var str = attributedString.string.slice(start, end);
    var glyphRun = run.attributes.font.layout(str, attributes.features, attributes.script);
    var glyphEnd = glyphIndex + glyphRun.glyphs.length;
    var glyphIndices = resolveGlyphIndices(str, glyphRun.stringIndices);

    var res = new _GlyphRun2.default(glyphIndex, glyphEnd, attributes, glyphRun.glyphs, glyphRun.positions, glyphRun.stringIndices, glyphIndices);

    glyphIndex = glyphEnd;
    return res;
  });

  return new _GlyphString2.default(attributedString.string, glyphRuns);
};

var generateGlyphs = function generateGlyphs() {
  return function (paragraph) {
    return {
      syllables: paragraph.syllables,
      value: stringToGlyphs(paragraph.attributedString)
    };
  };
};

exports.default = generateGlyphs;