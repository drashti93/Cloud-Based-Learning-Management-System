'use strict';

exports.__esModule = true;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _AttributedString = require('../models/AttributedString');

var _AttributedString2 = _interopRequireDefault(_AttributedString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var wrapWords = function wrapWords(engines) {
  return function (attributedString) {
    var syllables = [];
    var fragments = [];

    for (var _iterator = attributedString.runs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var run = _ref;

      var string = '';
      var tokens = attributedString.string.slice(run.start, run.end).split(/([ ]+)/g).filter(Boolean);

      for (var _iterator2 = tokens, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
        var _ref2;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref2 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref2 = _i2.value;
        }

        var token = _ref2;

        var parts = engines.wordHyphenation.hyphenateWord(token);
        syllables.push.apply(syllables, parts);
        string += parts.join('');
      }

      fragments.push({ string: string, attributes: run.attributes });
    }

    return {
      attributedString: _AttributedString2.default.fromFragments(fragments),
      syllables: syllables
    };
  };
};

exports.default = wrapWords;