'use strict';

exports.__esModule = true;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _unicodeProperties = require('@react-pdf/unicode-properties');

var _unicodeProperties2 = _interopRequireDefault(_unicodeProperties);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ignoredScripts = ['Common', 'Inherited', 'Unknown'];

/**
 * A ScriptItemizer is used by a GlyphGenerator to resolve
 * Unicode script runs in an AttributedString.
 */

exports.default = function () {
  return function (_ref) {
    var Run = _ref.Run;
    return function () {
      function ScriptItemizer() {
        (0, _classCallCheck3.default)(this, ScriptItemizer);
      }

      ScriptItemizer.prototype.getRuns = function getRuns(string) {
        var lastIndex = 0;
        var lastScript = 'Unknown';
        var index = 0;
        var runs = [];

        if (!string) return [];

        for (var _iterator = string, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
          var _ref2;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref2 = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref2 = _i.value;
          }

          var char = _ref2;

          var codePoint = char.codePointAt();
          var script = _unicodeProperties2.default.getScript(codePoint);

          if (script !== lastScript && !ignoredScripts.includes(script)) {
            if (lastScript !== 'Unknown') {
              runs.push(new Run(lastIndex, index, { script: lastScript }));
            }

            lastIndex = index;
            lastScript = script;
          }

          index += char.length;
        }

        if (lastIndex < string.length) {
          runs.push(new Run(lastIndex, string.length, { script: lastScript }));
        }

        return runs;
      };

      return ScriptItemizer;
    }();
  };
};