import { useState, useRef, useEffect } from 'react';

var isShallowEqual = function isShallowEqual(newValue, oldValue) {
  return newValue === oldValue;
};

function areInputsEqual(newInputs, lastInputs) {
  return newInputs.length === lastInputs.length && newInputs.every(function (newArg, index) {
    return isShallowEqual(newArg, lastInputs[index]);
  });
}

function useMemoOne(getResult, inputs) {
  var initial = useState(function () {
    return {
      inputs: inputs,
      result: getResult()
    };
  })[0];
  var committed = useRef(initial);
  var isInputMatch = Boolean(inputs && committed.current.inputs && areInputsEqual(inputs, committed.current.inputs));
  var cache = isInputMatch ? committed.current : {
    inputs: inputs,
    result: getResult()
  };
  useEffect(function () {
    committed.current = cache;
  }, [cache]);
  return cache.result;
}
function useCallbackOne(callback, inputs) {
  return useMemoOne(function () {
    return callback;
  }, inputs);
}

export { useCallbackOne, useMemoOne };
